#!/bin/bash

if [ $# -lt 1 ]
then
	echo "Usage: ./install_pinpoint.sh <-v verbose> [-k remove_temp] "
	echo "[note1]: Set 'verbose' as 1 for verbose compile, 0 for not verbose "
	echo "[note2]: Default value of 'remove_temp' is 1 (remove temporary files) "
	exit
fi
curdir="$(pwd)"

# ----- get arguments ----- #
remove_temporary_files=1
verbose=1

#-> parse arguments
while getopts ":k:v:" opt;
do
	case $opt in
	#-> optional arguments
	k)
		remove_temporary_files=$OPTARG
		;;
	v)
		verbose=$OPTARG
		;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;
	:)
		echo "Option -$OPTARG requires an argument." >&2
		exit 1
		;;
	esac
done


#-----------
#-> Part I
# pinpoint
#-----------

#1, INSTALL
# Execute the following commands to generate Makefile and compile:\\
# The executable file pinpoint will be present at src."

cd $curdir
echo ""
echo "Part I: Install pinpoint "
echo ""
if [ ! -f "pinpoint" ]
then
	echo "1.1 automatic configuration"
	aclocal
	autoconf
	autoheader
	automake -a
	if [ $verbose -eq 1 ]
	then
		echo "1.2 automatic configuration"
		./configure 
		echo "1.3 compile gsamples"
		make 
	else
		echo "1.2 automatic configuration"
		./configure 1> configure_out1 2> configure_out2
		echo "1.3 compile gsamples"
		make 1> make_out1 2> make_out2
	fi
	mv src/pinpoint .
fi

#----------
#-> Part II
# clean
#----------

#-> 2.1 clean temporary files in 'src/'
cd $curdir
echo ""
echo "Part II: remove temporary files and folders "
echo ""
echo "2.1 remove compiled files in src/"
cd src/
	make clean 1> ws1 2> ws2
	rm -f ws1 ws2
	rm -f Makefile.in
	rm -f Makefile
	rm -f gmon.out
cd ../

#-> 4.2 clean temporary files and folders in current directory
if [ $remove_temporary_files -eq 1 ]
then
echo "2.2 remove temporary files in current directory"
rm -f aclocal.m4
rm -f config.h.in
rm missing
rm install-sh
rm depcomp
rm -rf autom4te.cache
rm -f configure
rm -f configure_out1 configure_out2
rm -f Makefile.in
rm -f config.status
rm -f Makefile
rm -f make_out1 make_out2
rm -f config.h
rm -f stamp-h1
rm -f config.log
rm -f gmon.out
fi

#----------
#-> Part III
# command
#----------

#2, COMMAND LINE
# The usage of pinpoint is: ./pinpoint: <sample-file> <prediction-file> <output-file> [-p probability-threshold] [-w window-size]
# The parameter <sample-file> specifies the sample file used for prediction (see gsamples program).
# The parameter <prediction-file> specifies the probability file generated by the DeepBound.
# The parameter <output-file> specifies the predicted boundaries: 0 for end-boundary, 1 for non-boundary, and 2 for start-boundary.
# The parameter [probability-threshold] is optional (default value is 0.60), which specifies the minimum average probability over a window that will be considerred as a true boundary.
# The parameter [window-size] is optional (default value is 10), which gives the window size.



