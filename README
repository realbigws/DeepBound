#=================
DeepBound (v0.1)
date: 2017.01.15
#=================

Author: Sheng Wang
Contact email: realbigws@gmail.com , wangsheng@uchicago.edu, wangsheng@ttic.edu

please refer to my homepage:
http://ttic.uchicago.edu/~wangsheng/

#=================== Abstract =========================

Predict the boundary of transcript start and end from RNA-seq reads alignment, via AUC-Maximized DeepCNF model.


#=================== Install ==========================

1. download the package

git clone https://github.com/realbigws/DeepBound
cd DeepBound/

--------------

2. compile

cd source_code/
        make
cd ../

--------------

3. update the package

git pull


#=================== Oneline Command ==================

1. oneline command usage

Usage: ./oneline_command.sh <original_input> <output_folder>
[Note]:    <original_input> should be concatenated into one file
           <output_folder> shall contain output folders


2. oneline command example

./oneline_command.sh example/sample_test test_out/


#=================== format of original input =========

each sequence consists of 21 rows.

1. the initial row, starting with '#', is the header showing the comment or description of this sequence.

2. the first row below '#' header records the 'Start Mid End' label.
        If real-world data is applied, then just put any number here (e.g., 0);
        If for training purpose, then MUST set 0,1,2 for END, MID, and START, respectively.

3. the second row below '#' header records the positive abundance value.
        If real-world data is applied, then just put any number here (e.g., 0);
        If for training purpose, then MUST put a real positive value here to indicate the abundance value.

4. each data entry should have 21 lines in total, including the '#' header row, first boundary label row, and second abundance value row.
        The following 14 rows are the feature row, with the 1st row of them indicating the read coverage.
        The final 4 rows are the A,T,C,G sequence in 0/1 one-hot matrix format.


#=================== output files and folders =========

#-> input data list
1. sample_test_sample_list
   the file list shows the number of sequences in <original_input>, with the same order as in the original file.
   all following folders contain each sequence as a file with the same name as 'sample_x', where x is the order of sequence, starting from 0.

#-> input feature and label
2. feat_out/
   features generated by Generate_Feature

3. cov_out/
   the coverage value from <original_input>

4. bou_out/
   the 'Start Mid End' boundary label from <original_input>

5. abu_val/
   the abundance value from <original_input>

6. abu_out/
   the abundance value discretized into 15 labels, with boudanry set as {1, 8, 15, 22, 33, 47, 68, 94, 130, 179, 252, 358, 524, 859,}

#-> output prediction
7. bou_pred_out/
   the predicted boundary

8. abu_pred_out/
   the predicted abundance label

9. abu_pred_val/
   the predicted abundance value


#=================== Detailed Procedures ================

1. feature generation

Generate_Feature_v4 <raw_input> <root_feat> <root_cov> <root_l1> <root_l2> <root_l3>
[note]: root_l1 is for 'End Mid Start' (0,1,2) labels
        root_l2 is for abundance original value
        root_l3 is for 15 abundance labels


#+++++++++++++++++++++++++++++

2. training method

	mpirun -np 24 bin/DeepCNF_Train -r example/head1000_feat -t example/head1000_feat -w 75 -d 100 -s 3 -l 18 -f 0 -M 2 -D 10 1> out1 2> out2

[note]:
We use AUC-maximized DeepCNF to train our model. The above running example is just Toy Example. 
For real-world training, we should use much more data sample, and randomly divide them into Training_Data and Testing_Data.

#+++++++++++++++++++++++++++++

3. evaluation method

	bin/DeepCNF_Pred -i example/head1000_feat -w 75 -d 100 -s 3 -l 18 -m parameters/bou_model_MaxAUC_3lab > head1000_reso

[note]:
The output of the prediction is as following,

#-> 3530
 1 -> 0.016248 0.942982 0.040770 -> 0.942982  1
 1 -> 0.015592 0.947385 0.037024 -> 0.947385  1
 1 -> 0.022321 0.911999 0.065681 -> 0.911999  1
...

Where the initial row with '#' indicates the length of the sequence
For each line below '#', indicates the prediction results:
1st column : original label (for real-world application, please neglect this column)
3rd to 5th : predicted probability for label 0,1,2 (say, END,MID,START)
7th column : maximal predicted probability
8th column : the label with maximal predicted probability

#+++++++++++++++++++++++++++++
